$Header: /repo/public.cvs/app/BioGate/BioMooCore/core19.moo,v 1.1 2021/07/27 06:44:29 bruce Exp $

>@dump #19 with create
@create $generic_help named Core Utility Help:Core Utility Help
@prop #19."$login" {} rc
;;#19.("$login") = {"$login", "------", "This object manages command parsing for unconnected players and governs the initiation of an actual connection.  There are verbs pertaining to registration, controlling player creation, and doing site-locks (see `help blacklist' on $wiz_help).", "", "COMMANDS FOR UNCONNECTED PLAYERS", "", "Recall that for each line that an unconnected player types, the server parses that line into words (the same way normal commands are parsed into a list of words that is then assigned to `args') and then #0:do_login_command is called.", "", "  :parse_command (@args) => {verb, @args}", "    given the sequence of arguments that were fed to #0:do_login_command", "    this returns the name of a verb on $login to be called together with a ", "    list of arguments to be passed to it.", "", "By default this just returns args iff args[1] names an actual verb on $login that is +x and has args {\"any\",\"none\",\"any\"}.  Otherwise, it returns one of", "", "  .blank_command   -- verb to call if command line is empty", "  .bogus_command   -- verb to call if command line otherwise unintelligible", "", "In both cases :parse_command returns a verbname followed by the entire args list passed to it (including the would-be verb at the beginning if any).", "", "Currently the following verbs are available to non-connected players", "", "  h*elp @h*elp       -- print .welcome_message", "  ?                  -- print a short list of available commands", "  w*ho @w*ho         -- print a list of logged in players (excluding wizards)", "  co*nnect @co*nnect -- connect to an existing player", "  cr*eate @cr*eate   -- create a new player", "  up*time @up*time   -- tell how long the server has been running", "  version @version   -- tell which version of the server is running", "  q*uit @q*uit       -- logoff", "", "Adding a new command is fairly straightforward; just create a verb on $login, making sure a previous verb doesn't already match the name you want to give it.  Then give it args of \"any\" \"none \"any\" and make sure it is +x.  Such a verb should begin with `if (caller != #0) return E_PERM; ...' so as to prevent anyone other from a not-logged-in player from making use of it.", "", "CUSTOMIZATIONS", "", "  .welcome_message ", "    -- the message for \"help\" to print.", "  .create_enabled ", "    == 0 => @create prints .registration_string if one tries to use it", "    == 1 => anyone from a non-blacklisted site (see `help blacklist')", "            may use @create to make a new player", "", "  .registration_address", "    -- an email address for character creation requests", "  .registration_string  ", "    -- string to print to players to give them information about how to get ", "       a character created for them, .registration_address is substituted ", "       for %e, % for %%", "  .newt_registration_string", "    -- string to print to @newted players (see `help @newt').", "       same substitutions as for .registration_string.", "", "  .max_connections", "    -- integer representing the maximum connected players permitted on this moo.", "  .connection_limit_msg", "    -- string printed out when this is reached.", "  .lag_exemptions", "    -- list of non-wizard players who may login anyway.", "", "Other verbs", "   :registration_string()      => .registration_string with substitutions", "   :newt_registration_string() => .newt_registration_string with substitutions", "   :player_creation_enabled(connection) ", "       decides whether someone on connection should be allowed to create ", "       a player.  If you decide this shouldn't depend strictly on the blacklist", "       and on the value of .create_enabled, here's where the extra code can go.", "   :check_for_shutdown()", "       prints a warning message to append to the login banner in the event ", "       that the server will be going down soon.", "   :check_player_db()", "       prints a warning message to append to the login banner in the event ", "       that $player_db is being reloaded to warn players that their character", "       names might not be recognized.", "", "SITE LOCKS", "see `help blacklist'", ""}
@prop #19."$container" {} rc
;;#19.("$container") = {"The Generic Container (for programmers)", "", "In addition to the command verbs described under `help containers'", "and the _msg properties described in `help container-messages',", "the following verbs and properties are available for use within programs", "", ".opened == TRUE iff the container is open", ".dark   == TRUE iff the contents of the container may be seen", ".opaque -- describes the correlation between .open and .dark", "   == 0  container is always !dark", "   == 1  container is dark iff it is closed", "   == 2  container is always dark              ", "", ":set_opaque(newvalue)   ", "  changes the .opaque value for the container", "  => newvalue or E_PERM or E_INVARG", "", ":set_opened(newvalue)   ", "  opens/closes the container (updates .open and .dark) according to newvalue", "  => newvalue or E_PERM", "", ":is_openable_by(player) ", " what the :open command uses to test whether the player should be able to open", " the container.  By default this refers to .open_key  (set by", " @(un)lock_for_open), but the object owner is free to customize this.", "", "N.B.:  There is no way to directly set .dark; .dark can be changed only by ", "changing one of .opaque or .opened.  Use :set_opaque(0) and :set_opaque(2)", "to have .dark change independently of the value of .opened."}
@prop #19."$mail_agent" {} rc
;;#19.("$mail_agent") = {"$mail_agent", "", "This object contains a two distinct sets of routines:", "", "  1.  utilities for performing basic mailsystem functions, e.g.,", "      matching on recipient names, resolving mail forwarding, ", "      formatting messages, sending messages", "", "Recipient Matching", "", "match           - match on a $mail_recipient", "match_recipient - match on either a $mail_recipient or a player", "match_failed    - print angry messages to the user for $failed/ambiguous_match", "", "look_self  - provides a list of available $mail_recipients", "check_names", "touch", "accept", "", "Message Format", "", "make_message        - produces a message in the canonical transmission format", "name                - single recipient     => string for address field", "name_list           - list of recipients   => string for address field", "parse_address_field - address field string => object list", "", "Sending Messages", "", "send_message  - advertised message sending routine.", "raw_send      - raw message sending routine ", "                (only called by $mail_editor:send and this:send_message)", "resolve_addr  - converts a given list recipients into a list of actual ", "                recipients and objects to be notified.", "sends_to      - Does X forward (transitively) to Y", "", "Mail Options", "", "option         ", "option_verbose", "", "  2.  canonical versions of mail_recipient verbs", "", "Ideally, the verbs to perform operations on a given mail recipient would be located on the recipient itself, except for the fact that these verbs also need to be located on players, which for various reasons, shouldn't be children of $mail_recipient.  Multiple inheritance would solve our problems, but we don't have it yet.  Ergo, both $mail_recipient and $player refer to the following verbs here:", "", "display_seq_full     print entire text of messages  (@read)", "display_seq_headers  print headers of messages      (@mail)", "rm_message_seq       remove messages                (@rmm)", "undo_rmm             undo last rm_message_seq       (@unrmm)", "expunge_rmm          flush removed messages         (@unrmm expunge)", "list_rmm             list removed messages          (@unrmm list)", "renumber             renumber messages              (@renumber)", "msg_summary_line     msg header => display_seq_headers/list_rmm summary line", "", "parse_message_seq    command line msg sequence spec => message sequence", "new_message_num      => message number of next new message", "length_all_msgs      => number of messages (total)", "length_num_le        => number of messages numbered <= some number", "length_date_le       => number of messages dated <= some date", "exists_num_eq        => true iff there exists a messsage with the given number", "from_msg_seq         => message sequence of msgs from given sender(s)", "to_msg_seq           => message sequence of msgs to given recipient(s)", "subject_msg_seq      => message sequence of msgs with subjects containing text", "body_msg_seq         => message sequence of msgs with bodies containing text", "messages_in_seq      => list of {message number, message} pairs", "", "messages             == :messages_in_seq(1,:length_all_msgs()+1)   (obsolete)", "", "The $mail_agent versions of these verbs are set_task_perms(caller_perms()) and perform their operations on caller, which in turn is assumed to have done any necessary security checks."}
@prop #19."MR-subscribing" {} rc
;;#19.("MR-subscribing") = {"Subscribing to Mail Recipients", "------------------------------", "There are two notions of being \"subscribed\" to a mailing list/recipient.", "", "(1) Hard subscribed == being on the recipient's .mail_forward list so that mail sent to this list is forwarded to one's own .messages as well (see `help mail-forwarding').", "", "(2) Soft subscribed == keeping track of a current message for this recipient and (optionally) being on the recipient's .mail_notify list.", "", "", "Each player has a .current_message property that contains, for each recipient the player cares to keep track of, a current message number and a last read date.", "", "player:current_message(rcpt)                 (somewhat obsolete)", " => player's current message number for rcpt ", "", "player:get_current_message(rcpt) ", " => player's {current message number for rcpt, last-read-date for rcpt}", "", "player:make_current_message(rcpt)", " => adds a current_message entry for rcpt  (NOOP if rcpt == player)", "", "player:set_current_message(rcpt,n|E_NONE,[,date])", " => sets player's current message number for rcpt to n iff n!=E_NONE", "    updates the last-read-date for rcpt to date iff date > last-read-date", "", "player:kill_current_message(rcpt)", " => removes current-message info for rcpt  (NOOP if rcpt == player)", "", "", "On $mail_recipient, .mail_forward and .mail_notify are -c so one needs to use the following verbs to actually modify them.", "", "    :add_forward(@new_recipients)", "    :delete_forward(@recpients)", "    :add_notify(@new_notifiees)", "    :delete_notify(@notifiees)", "", "A recipient's owner is, of course, allowed to make arbitrary changes to .mail_forward and .mail_notify.  However, the default versions of these verbs also allow any player to add him/herself to a recipient's .mail_forward or .mail_notify if the recipient is readable (see `help MR-access') by him/her.", "", "Likewise any player may use the :delete* verbs to delete him/herself from any .mail_forward/.mail_notify list, regardless of his actual access to the list."}
@prop #19."MR-naming" {} rc
;;#19.("MR-naming") = {"One may always refer to a list by its object number.  In order to refer to it by name, it must be contained in $mail_agent, which holds all mailing lists, i.e., those that you want others to be able to refer to by name.", "", "The .aliases field holds the names by which one may refer to the list, but only those names not containing spaces actually count for anything.  As with certain other types of objects (e.g., players), set_aliases() needs to be called in order to change the .aliases field.", "", "$mail_agent:match(name) ", "    is the canonical way to obtain the objectid of a mailing list ", "    given the name (\"*\" is assumed; an initial \"*\" will be dropped).", "", "$mail_agent:match_recipient(name) ", "    is the canonical way to obtain the objectid of a list or player", "    matching the given name.  An initial \"*\" indicates that this is ", "    supposed to be a list.", "", "$mail_agent:match_failed(objid,name) ", "    is the mail_recipient counterpart to $command_utils:object_match_failed"}
@prop #19."MR-access" {} rc
;;#19.("MR-access") = {"Controlling Access to Mail Recipients", "-------------------------------------", ":is_writable_by(one) - one may alter/add/remove saved messages", ":is_readable_by(one) - one may read messages.", ":is_usable_by(one)   - one may send to this list", "", "By default, these verbs refer to the following properties:", "", "writers   - list of players other from the owner who can do anything", "readers   - if == 1, indicates a public mailing list.", "            list of additional readers (by default anyone who receives mail ", "            sent to the list can read the saved messages).", "moderated - if false, indicates a normal mail recipient everyone can send to.", "            otherwise this should be a list of approved senders.", "", "Terminology:", "  A mailing list is \"public\" if everyone can read it.", "  A mailing list is \"moderated\" if not everyone can send to it.", "", "Note that while being able to write to a recipient implies being able to read from it or send to it, neither of read-ability or send-ability implies the other.", "", "It is highly recommended that if you are creating custom mail recipients with variable reader/sender lists, i.e., you find you need to write your own :is_readable/usable/writabe_by verbs, you are best off if such verbs are of the form", "", "  return pass(@args) || << your_test(args[1]) >>", "", "and have .writers == .readers == {} and .moderated == 1.  This will ensure", " (1) wizards having write access", "     --- necessary in order for :receive_message to work", " (2) writers being able to read and send (the converse being a ludicrous ", "     situation), ", " (3) persons on the mail_forward list of someone with reader access will also", "     have read access (convenient)."}
@prop #19."$mail_recipient" {} rc
;;#19.("$mail_recipient") = {"Generic Mail Recipient", "----------------------", "A \"mail recipient\" is, by definition, an object that can be sent mail.", "Mail recipients must either be players or descendants of $mail_recipient.", "", "One source of confusion is that the terms \"mail recipient\", \"mail folder\", \"mailing list\", and \"mail collection\" really all refer to the same kind of object.  It so happens that $mail_recipient serve several distinct functions and we tend to use whatever term happens to best match the application under discussion, e.g., it's a \"mailing list\" if we're playing with its .mail_forward property but it's also a \"mail folder\" if we're examining the messages that have been saved in it.", "", "Note that, by default, a freshly created recipient is accessibly only by you.  If you wish to make a publically accessible recipient, set .readers=1.  Furthermore, if you want to allow a message on your recipient to be removed by its sender without your intervention, set .rmm_own_msgs=1.  Finally, in order for other players to be able to refer to your recipient by name, the object must reside in $mail_agent.  $mail_agent will not accept the object unless it has an actual description and a name distinct from all other mail recipient names/aliases.", "", "Topics:", "", "  MR-access       -- controlling read, write and send access to a recipient", "  MR-naming       -- naming conventions and how to match on recipient names", "  MR-sequences    -- message sequence arguments to $mail_recipient verbs", "  MR-reading      -- reading messages/headers on recipients", "  MR-searching    -- searching message lists for patterns in certain fields", "  MR-writing      -- removing and renumbering messages", "  MR-subscribing  -- updating .mail_forward, .mail_notify ", "                       and the story of .current_message", "  MR-expiration   -- expiring and netmailing messages from recipients"}
@prop #19."receiving-mail" {} rc
;;#19.("receiving-mail") = {"Receiving Mail", "--------------", "By definition a recipient \"receives\" a mail message when its :receive_message verb is called with that message as an argument.", "", ":new_message_num()", "=> number that will be assigned to the next incoming message.", "By default this returns the maximum of the message numbers appearing in ", "messages or .messages_going, incremented by 1.  If the recipient is a player", "then the value returned will be 1 higher if it conflicts with the player's ", "current message number for him/herself.", "", ":receive_message(msg,sender)", "By default this first calls this:new_message_num to obtain a message number to assign to the incoming message and then appends {num,msg} to this.messages.  ", "`sender', the original sender, is supplied in case one wants different ", "action depending on who is sending the message (e.g., mail-gagging).", "The return value should be an error or string if :receive_message is considered to have failed in some way.  Otherwise, a number should be returned --- this number is given to any :notify_mail routines that are called and is expected to either be 0 or the number assigned to the incoming message.", "", "Note that :receive_message can do arbitrary things, including resending the same message to a new destination.  Hacking :receive_message to resend messages is different from using .mail_forward in the following respects", "  (1) the resent message is considered to be a distinct message having this ", "      object as its \"author\" --- i.e., the From: line will necessarily be ", "      different.", "  (2) since this \"forwarding\" is invisible to the mailsystem, ", "      there is no protection against loops and multiple copies.", ""}
@prop #19."mail-format" {} rc
;;#19.("mail-format") = {"Mail Transmission Format", "------------------------", "There is a standard message format used for transmitting messages.  This is the format that $mail_editor:make_message produces, and that :receive_message verbs on players and $mail_recipients expect to see.  The (currently experimental) @refile and @copym commands also use this format to transfer messages.", "", "This *transmission* format is distinct from the *storage* format, though, for convenience this same format is often used as well for storing messages in player collections and ordinary $mail_recipient children though, in general, there is no requirement that this be the case.", "", "A transmitted message is a list in the following form", "", "   date (number),", "     the time() value at the time the message was sent.", "   from (string),", "     the sending object (address list form)", "     if this is not a player, an additional header will indicate the ", "     current ownership of the object.", "   to  (string),", "     recipients (address list form) which can either be players ", "     or $mail_recipient descendents.", "   subject (string),", "     subject of the message, or \" \" if there is no subject,", "  @additional optional headers (list of strings),", "     each header has the form \"<header-name>: text\" where <header-name>: ", "     is padded out to a width of 10 columns for the convenience of ", "     :display_message.  Currently \"Reply-to: <address list>\" is the only ", "     additional header in use,", "   \"\",", "  @body of message (list of strings)", "", "Note that the from, to and subject lines do *not* include a header name like \"From:\", \"To:\", or \"Subject:\".  The @'s indicate that the lists in question get spliced in (as usual), thus the entire message is a list whose first element is a number and the rest are strings.", "", "The address lists that appear in the from and to lines is a string in the form a sequence of object ids, each enclosed in parentheses and preceded by optional text, e.g.,", "", "  \"*Core-DB-Issues (#8175), Rog (#4292), and Haakon (#2)\"", "", "The text is intended to give the current name of each object for the benefit of human readers, but is actually ignored by all header parsing routines.  The convention is that the text is either a player name or a * followed by a mailing list name."}
@prop #19."mail-resolve" {} rc
;;#19.("mail-resolve") = {"Resolving Mail Forwarding & Notification", "----------------------------------------", "For each recipient of a given mail message, the following two verbs are called to determine where the message should actually go and who should be notified about it:", "", ":mail_forward([from])", "    should return either", "     . a list of objects (either players or $mail_recipients)", "         to which mail for this recipient will be redirected.", "     . a string error message to be printed to the player sending the message.", "         If this recipient is one of the original destinations (i.e., not the", "         result of a previous forwarding), no mail is actually sent.", "", "    If :mail_forward returns a nonempty list, the recipient itself will *not*", "    actually receive the mail message unless it is included in the list.", "    #-1 is allowed to be on the list; it is ignored but does make the list ", "    nonempty.  Thus, having :mail_forward() return {#-1} is the canonical way", "    to have arriving mail disappear without being kept or forwarded.", "", ":mail_notify([from]) ", "    should return a list of objects that are to be told about any mail sent ", "    to this recipient (whether or not the recipient actually receives it).", "    Said objects must have a :notify_mail verb, but other from that, there ", "    is no restriction on what these can be.", "", "    object:notify_mail is called with the arguments ", "    (sender,recipients,msgnumbers) where ", "      recipients  == list of recipients including object in .mail_notify", "      msgsnumbers == corresponding list of :receive_message return values", "                 (or 0 if :receive_message is not actually called, which", "                  will be the case if the recipient forwards without keeping)", "", "When called as part of a mail send, the `from' argument is the immediate predecessor on the forwarding chain.  The default versions of these verbs return the values of .mail_forward and .mail_notify respectively (pronoun_subbing if the value is a string), unless this is a moderated mailing list and `from' is an unapproved sender (see `help MR-access') in which case the following verbs are called instead:", "", ":moderator_forward(from) ", "    what :mail_forward should return for mail coming from unapproved senders", "    This returns .moderator_forward (pronoun_subbed if a string) by default.", "", ":moderator_notify(from)", "    what :mail_notify should return for mail coming from unapproved senders", "    This returns .moderator_notify (pronoun_subbed if a string) by default.", "", "Since the :mail_forward verbs only see the previous sender in the forwarding chain, if, e.g, B is moderated but A can send to B (i.e., B:mail_forward(A) returns an actual list), then any mail sent to A goes to B even if the original sender isn't normally allowed to send to B directly.", "", "These verbs should all allow `from' to be omitted in which case they should return as if `from' were a generic approved sender (e.g., wizard).", "", "It should rarely be necessary to actually modify any of :*_forward/*_notify verbs, since one has a fair amount of control over their behavior via the following properties", "", "  .mail_forward", "  .mail_notify", "  .moderated          (see `help MR-access')", "  .moderator_forward", "  .moderator_notify"}
@prop #19."sending-mail" {} rc
;;#19.("sending-mail") = {"Sending Mail", "------------", "$mail_agent:send_message(from,recipients,headers,body)", "  from:        sender of the message ", "               (this must be you or something you own; otherwise => E_PERM)", "  recipients:  object or list of objects (must all be players or ", "               $mail_recipient descendants)", "  headers:     either a string (contents of the Subject: line) ", "               or a list {subject,replytos} replytos is a list ", "               of objects designated to receive replies.", "               Use {\"\",replytos} to have a Reply-to: without a Subject:", "", "This is the canonical way to send a mail message from a program.", "This calls $mail_agent:make_message to format the arguments into an actual message (see `help mail-format') and then $mail_agent:raw_send to do the actual sending which goes as follows:", "", "  (1) Call :mail_forward on all recipients add any new recipients thus obtained to final recipient list, keep calling mail:forward on the new recipients until we obtain no additional recipients.  If one of the initial recipients is invalid, is not a player or $mail_recipient, or has its mail_forward return a string error, then we print the error message and abort at this point with no mail being sent.  If one of the later recipients bombs similarly, error messages are printed, but in this case mail still goes out to the other recipients.", "", "  (2) Call :mail_notify on all recipients encountered in stage (1) to get a list of objects to notify.", "", "  (3) All final recipients receive the message (see `help receive-mail')", "  (4) All notifications are delivered (using :notify_mail())", "", "We return {0, @failed_recipients} if we bombed out at step 1.", "Otherwise return {1, @actual_rcpts} indicating what mail was sent."}
@prop #19."mail-system" {} rc
;;#19.("mail-system") = {"Mail System", "-----------", "The following topics describe the guts of the LambdaCore mail system", "", "sending-mail     -- how to send mail from a program; what happens.", "mail-forwarding  -- how to do mail forwarding/notification (the simple version)", "mail-resolve     -- how mail forwarding/notification works, in gory detail", "receiving-mail   -- what :receive_message should do", "mail-format      -- format of transmitted messages", "mail-command-parsing   (TODO) -- routines for parsing mail commands", "", "$mail_recipient  -- generic non-player mail recipient", "$mail_agent      -- mail utility object"}
@prop #19."$player_db" {} rc
;;#19.("$player_db") = {"", "Database of Players", "-------------------", "This is an instance of the Generic Database ($generic_db) that", "holds the {name/alias,#objectid} pairs for every ", "name and alias of every player in the MOO.", "", "Verbs supplied include", "", "  :find(string)        => player or $ambiguous_match or $failed_match", "  :find_exact(string)  => player or $failed_match (does not do partial matches)", "  :find_all(string)    => list of all matching players", "", "  :insert(string,player) ", "       records that string is now a name or alias of player", "  :delete(string) ", "       removes string from the db", "  :available(string)", "       returns 1 if string is available as a player name or alias,", "       an object if string is in use, or 0 if string is otherwise unavailable.", "  :load()", "       resets the db, inserting all current player names and aliases.", "", "The internal representation and all of the above verbs (except :load() and", ":available()) are as described for $generic_db.", "", "It should be noted that for any application that involves resolving a player name from a command line, you should be using $string_utils:match_player() rather than $player_db:find(), since the former will deal correctly with other ways of referring to players apart from their names and aliases (e.g., literal object numbers, \"me\", \"$no_one\"...).", "", ":load() needs to be done periodically as it is possible for the player db ", "to get out of synch with reality.  In particular, there is currently no way", "to block someone writing his own player :recycle() verb that neglects to ", "remove his names from the player db.", "", "While a :load() is in progress the .frozen property is set to 1 to indicate that any results of :find*() are not to be trusted."}
@prop #19."core-index" {} rc
;;#19.("core-index") = {"*index*", "Core Utility Help Topics"}
@prop #19."object-matching" {} rc
;;#19.("object-matching") = {"", "Which :match...() Verb Do I Call?", "---------------------------------", "There are many situations where one wishes to obtain an object from a room or a player's .contents whose name/aliases matches a particular string.  There are four main verbs available for this and it is important to understand the distinctions between them and how they are supposed to be used.", "", "(*)  LOC:match(\"X\")", "     -- what you get looking for something that is inside LOC and named \"X\".", "        By default, this looks through LOC.contents to find a unique object ", "        having a name or alias that has \"X\" as a prefix.", "", "Essentially, you can think of :match as a contents-matching verb, though, e.g., for rooms you also get matches on exits as well.", "", "(*)  LOC:match_object(\"X\", YOU)           [YOU defaults to player]", "(*)  YOU:my_match_object(\"X\", LOC)        [LOC defaults to player.location]", "     -- what YOU get being located at LOC and looking for something named \"X\".", "        By default these both return $string_utils:match_object(\"X\",LOC,YOU)", "", "(*)  $string_utils:match_object(\"X\", LOC, YOU) ", "   -- what you *would* get *if* YOU were a typical player, YOU were inside LOC,", "      YOU were looking for something named \"X\", *and* LOC were a typical place.", "", "In other words, $string_utils:match_object describes the :match_object() algorithm for \"typical places\" and the :my_match_object for \"typical players\":", "", "    (1)  check for \"X\" being one of \"\", \"me\", \"here\", \"$something\", or \"#n\"", "    (2)  try YOU:match(\"X\") i.e., something in your inventory (maybe)", "    (3)  try LOC:match(\"X\") i.e., some object in the room (maybe)", "", "The distinction between these location:match_object and player:my_match_object has to do with whether the player or the location should determine what the matching algorithm is.  Which one you should use depends on the command that you are writing.  If you are writing a command with a virtual-reality flavor, then you should be respecting the room owner's idea of which objects you can \"see\" and thus the command should be calling the location's :match_object verb.  If you are writing a building/programming command where it is appropriate for the player to determine the matching algorithm  --- whether because the current location is irrelevant, not to be trusted, or both --- then the player's :my_match_object verb should be called.", "", "Examples:", "", "  `look diamond in box'", "      calls box:match(\"diamond\").  This is a match on the contents of box.", "", "  `take ball', ", "      calls player.location:match_object(\"ball\")", "      to determine which \"ball\" to take.  Note that if the room is dark, ", "      we might not be able to find any \"ball\".", "", "  `@program widget:foo', ", "      calls player:my_match_object(\"widget\") to get the player's own idea", "      of what \"widget\" should be.  Note that if I were carrying something ", "      named \"widget\" and expecting to be programming a :foo() verb on it,", "      it would be potentially disastrous should the room where I am decide", "      for me to be programming something else (not even necessarily ", "      called \"widget\").", "", "Object Matching Failures", "------------------------", "As with other matching routines, one gets back ", "", "  $failed_match in the case of no matching object", "  $ambiguous_match in the case of more than one matching object", "  $nothing in the case of a blank string argument", "", "or an object-id.  In these first 3 cases, one usually wants to translate these nonresults to the player; this is what $command_utils:object_match_failed.  The standard idiom to mimic what the builtin parser does, say, with the direct object is", "", "  dobj = foo:match_???(dobjstr);", "  if($command_utils:object_match_failed(dobj, dobjstr))", "    \"...give up.  nothing to do.   error message has already printed...\";", "  else", "    \"...dobj is something useful.  Continue...\";", "    ...", "  endif"}
@prop #19."$no_one" {} rc
;;#19.("$no_one") = {"$no_one", "-------", "..is a powerless player.  He owns no objects, not even himself; nor does he own any verbs.  He is, however, a programmer and thus may use eval().", "In fact his sole purpose is to evaluate questionable code.", "`questionable' could be in either or both of the following senses", "", "(1) Its origin is sufficiently uncertain so that there is no obvious way of deciding whose permissions it should run under.", "(2) The code itself is potentially malicious, i.e., to the extent that one does not want to be evaluating it using one's own permissions.", "", "set_task_perms($no_one);  is thus the canonical idiom in wizard code for rendering anything that follows mostly harmless.  For use by ordinary programmers, we have:", "", "    $no_one:eval(string)", "", "which attempts to evaluate an arbitrary string using $no_one's permissions.", "string is either an expression or \";\" followed by one or more statements, of which the final semicolon may be omitted.  return values are what eval() would return (either {1,value} or {0,@error_messages})."}

>> Network buffer overflow: 12 lines of output to you have been lost <<
@prop #19."$generic_options" {} rc
;;#19.("$generic_options") = {"Generic Option Package", "----------------------", "It occasionally happens that one has a command or set of commands for which one wishes to provide several options/flags that a player can set to customize the command's behavior for him/herself.  Making each option a separate property is a bit expensive, especially when the option in question is merely a boolean flag that gets set to false in most cases.  This package provides an alternative, as well as providing a uniform set of commands for setting these flags/options and checking that the values given are of appropriate types.", "", "Instead of needing several properties, only one is required to store a list containing values for all of the options.  An \"option package\" (pkg, below) is then an object of this class, which provides routines for manipulating such lists.", "", "The set of option names is divided into a set of \"real\" options, those whose names will actually appear in a given list, and \"extras\" which are either synonyms for or represent combinations of real options.", "", " pkg:add_name(name)      adds name to .names  (remove it from .extras if there)", " pkg:add_name(name,1)    adds name to .extras (remove it from .names if there)", "    => 1 - ok, 0 - already added, E_INVARG - illegal name, E_PERM", "", " pkg:remove_name(name)   remove name from either .names or .extras", "    => 1 - ok, 0 - not present, E_PERM", "", "For setting or retrieving values we have", "", " pkg:get(options,name) ", "    => value (or 0 if name isn't a real option)", " pkg:set(options,name,value)", "    => revised options (or string error message if something goes wrong)", "", "By default, a given option can only be a boolean flag, having one of the values 0 (absent from the list), or 1 (present in the list).  :set translates 0/\"\"/{} to 0 and any other non-object value to 1.", "", "One may however designate a wider range of possible values for an option \"foo\" by either installing one of", "", "  pkg.type_foo", "    -- list of allowed types, ", "       e.g., {NUM,STR}   => must be a number or a string", "       e.g., {OBJ,{OBJ}} => must be an object or a list of objects", "    for anything fancier use:", "", "  pkg:check_foo(value)", "    => string error message or {value munged as desired}", "", "In general, the only restriction on option values is that 0 is the only false value; setting an option to \"\" or {} sets it to 0.  Every option defaults to 0, and no matter what you install as .type_foo or :check_foo(), 0 will always be a legal value for option \"foo\".", "", "When presented with an option that is in .extras, :set will typecheck the value as described, however, then :actual(name, value) will be called to obtain a list of {name-of-real-option, value} pairs indicating which combination of real options should be set.", "", "Other verbs", "  pkg:parse(args,...)", "    parses the command line arguments of a @whatever_option command", "    => {optionname, value}  if the player wants to set an option", "    => {optionname}         if the player wants to view an option", "    => string error message  otherwise", "", "  one may install pkg:parse_foo to parse arguments for option \"foo\" ", "    !foo     => {\"foo\",0}  (:parse_foo not called)", "    foo=     => {\"foo\",0}  (:parse_foo not called)", "    -foo     => {\"foo\",0}  (:parse_foo not called)", "    +foo     => pkg:parse_foo(\"foo\",1)", "    foo=word => pkg:parse_foo(\"foo\",\"word\")", "    foo word1 word2    => pkg:parse_foo(\"foo\",{\"word1\",\"word2\"})", "    foo is word1 word2 => pkg:parse_foo(\"foo\",{\"word1\",\"word2\"})", "", " pkg:show(options,name|list of names)", "    => list of strings describing the current value of the named option(s).", "       calls     pkg:show_foo(options,list of names) or", "       refers to pkg.show_foo", "       to describe option \"foo\"", "", "(see sources for details...  at some point I'll finish writing this... --Rog)"}
@prop #19."MR-sequences" {} rc
;;#19.("MR-sequences") = {"Message Sequences", "-----------------", "A \"message sequence\" is a handle by which one may refer to a particular subset of a mail recipient's (player or $mail_recipient-descendant) saved messages.  Routines like rcpt:display_seq_headers or rcpt:display_seq_full need to be supplied with message-sequence arguments to deterimine which headers or full-messages to display.", "", "Message sequences can in turn be obtained from routines like rcpt:parse_message_seq, which takes a command-line description of a message sequence on that particular recipient and returns the corresponding message sequence handle.", "", "The actual form of a message sequence (though you shouldn't actually need to make use of this) is that of a set of integers in the format used by $seq_utils (see `help $seq_utils').  It should however be noted that these integers are *not* themselves message numbers, but rather indices into the list of saved messages.  For example, if a particular recipient holds 5 messages numbered 1,3,5,7,9.  Then the message sequence handle representing messages 3,5,7 collectively, would be {2,5} which is $seq_utils-ese for the range 2..4, namely the second, third and fourth messages saved on that recipient.", "", "The following verbs are available for obtaining indices to use in message sequences", "", "  :length_all_msgs()    => total number of messages, or equivalently,", "                        => index of last message", "  :length_num_le(n)     => number of messages numbered <= n, or equivalently,", "                        => index of highest numbered message <= n", "  :exists_num_eq(n)     => 0 unless there exists a message numbered n in which", "                           case we return the index of that message.", "  :length_date_le(date) => number of messages dated <= date, or equivalently,", "                        => index of most recent message dated <= date", "", "  :length_date_gt(date) => number of messages dated > date", "", "Note that r:length_date_gt(date) == r:length_all_msgs()-r:length_date_le(date).", "The only reason :length_date_gt is provided as a separate routine is in order ", "to do quick checks for the existence of new mail (as @rn needs to do)."}
@prop #19."MR-reading" {} rc
;;#19.("MR-reading") = {"Read verbs", "----------", "The following verbs may be used to extract headers/messages from readable mail recipients/players;", "", ":display_seq_headers (message sequence, current message number, last_read_date)", "  Does a @mail listing of the given message sequence.  If current message", "  number is given and the sequence includes it, we mark it with a `>'.", "  Likewise if the sequence includes any new messages (i.e., dated after ", "  last_read_date), these are also indicated as such.", "", "display_seq_full (message sequence, preamble)", "  Does a @read listing of the given message sequence.  Each message is preceded", "  by preamble.", "  => {new current message number, new last_read_date}", "", ":messages_in_seq (index)", "  => {n, msg}", ":messages_in_seq (message sequence)", "  => {{n_1,msg_1},{n_2,msg_2},...}", "  where the n_i are message numbers and the msg_i are messages in transmission", "  format (see `help mail-format')", "", ":list_rmm ()", "  Does an `@unrmm list' listing of messages in .messages_going"}
@prop #19."MR-writing" {} rc
;;#19.("MR-writing") = {"Write verbs", "-----------", "The following verbs can be used to manipulate writable mail recipients/players:", "", ":rm_message_seq (message sequence)", "  Does an @rmmail.  Messages in message sequence are removed from this ", "  recipient's saved .messages and written to .messages_going.", "", ":undo_rmm ()", "  Does an @unrmm.  Messages in .messages_going are copied back to .messages.", "", ":expunge_rmm ()", "  Does an @unrmm expunge.  Blows away .messages_going.", "", ":renumber ()", "  Does a @renumber.", ""}
@prop #19."MR-searching" {} rc
;;#19.("MR-searching") = {"Search verbs", "------------", "The following verbs can be used on a readable mail-recipient/player to search for messages with fields matching a given pattern.", "", "from_msg_seq (objectid or list [,mask])", "  => message sequence: messages from (one of) the given objectid(s)", "", "%from_msg_seq (string or list [,mask])", "  => message sequence: messages with (one of) the given string(s)", "     in the From: line", "", "to_msg_seq (objectid or list [,mask])", "  => message sequence: messages to (one of) the given objectid(s)", "", "%to_msg_seq (string or list [,mask])", "  => message sequence: messages with (one of) the given string(s)", "     in the To: line", "", "subject_msg_seq (string [,mask])", "  => message sequence: messages with given string occurring in Subject:", "", "body_msg_seq (string [,mask])", "  => message sequence: messages with given string occurring in body of message", "", "In all cases `mask' is a message sequence which one may supply to limit the range of the search.  One way of looking at it is that the message sequence to be returned is first intersected with mask."}
@prop #19."$housekeeper" {} rc
;;#19.("$housekeeper") = {"The housekeeper is an object that can help keep other objects where they belong.  New MOOs may want to add their own user interface for the housekeeper; here is some information that may be helpful.", "", "To indicate what objects should be cleaned:", "", "  :add_cleanup(object[, requestor[, where]])", "    Ask the housekeeper to clean 'object' for 'requestor' to 'where'.", "    Requestor defaults to 'player'.", "    Where defaults to object.location.", "", "  :remove_cleanup(what[, requestor])", "    Remove 'what' from the cleanup list at 'requestor's request.", "    Will remove it only if 'requestor' made the original request and owns", "    the object or the destination.", "", "To actually get the housekeeper to clean stuff up:", "", "  :cleanup([insist])", "    Clean up player's objects.  Argument is 'up' or 'up!' for manually", "    requested cleanups.  'up!' means to clean things even if it's against", "    the housekeeper's better judgement.", "", "  :replace(object[, insist])", "    Clean up the indicated object.  'insist' is as in :cleanup.", "", "  :continuous()", "    Starts the housekeeper cleaning continuously, killing any previous", "    continuous task.  This should be called only when starting up a new MOO,", "    or if something has gone wrong, as normally it will just keep going", "    without any help.", "", "  :litterbug()", "    Clean up all the places in housekeeper.public_places by getting rid of", "    all contents not in their .residents lists.  This is called by", "    :continuous, so it doesn't need to be called directly.", "", "To find out what's being cleaned to where for whom:", "", "  :cleanup_list([whom])", "    Show 'player' the personal cleanup list for 'whom', or the housekeeper's", "    complete list if no argument is given.", "", "  :clean_status()", "    Show 'player' a brief summary of eir personal cleanup list."}
@prop #19."$recycler" {} r #2
;;#19.("$recycler") = {"$recycler", "=========", "", "Rather than having the server built-in recycle() and create() functions handle the creation and destruction of objects, a recycling center has been created to simulate these actions by  changing objects that would have been recycled into children of $garbage (The Generic Garbage Object) and making them owned by Hacker, and then when they're needed again, to avoid a raw create() command, those objects are given to whoever's asking for them.", "", "Most Useful Verbs", "-----------------", "", "$recycler:_recycle( object )", "  This will effectively recycle an object. (As a point of fact, it changes ownership of the object to Hacker and makes the object a child of $garbage.)  It handles .ownership_quota and .owned_objects properly.  Generally, use this instead of a recycle() in your verbs.", "", "$recycler:_create( parent object [ , new owner object ] )", "  This effectively creates an object (with the specified parent, if possible, and with the specified owner, if possible; these are the same restrictions as on the server create() builtin).  This is what should generally be used instead of create() in your programming.", "", "$recycler:valid ( object )", "  This is a variant of the server built-in valid() except that it handles the $garbage objects as well.  It returns a 1 if the object specified -is- valid and is -not- a $garbage object.", "", "Other Notes", "-----------", "", "request <object> from <recycler>", "  This is not an internal verb (it's !x).  It is, however, a command-line verb that can be used to request a specific object from the recycler.  It's also useful for the creation of objects like a Magic Number Repository.  When the object is removed from the recycler, the .announce_removal_msg is announced to the room if it's set (it's piped through $string_utils for pronoun substitution).", "", "show-history <recycler>", "  This is a wizardly verb which allows wizards to check the `history list' of the recycler. The history maintains the latest ($recycler.nhist) entries.", "", "$recycler.orphans", "  This maintains a list of objects for which the recreation process got mangled. It ought to be checked every once in a while to see what's up."}
@prop #19."$error" {} r #2
;;#19.("$error") = {"$error", "======", "", "The Error Generator, $error, may be used to automatically generate errors. This is particularly useful if you are working in a !d verb but have occasion to -want- to crash with traceback. To raise a specific error, use $error:raise(error type) -- for example, $error:raise(E_PERM) will produce traceback resulting from a Permission Denied error.", "", "Random notes about $error:", "", "+ The complete list of errors is stored in $error.names.", "+ The seemingly useless :accept() verb on $error is so that $error:E_RECMOVE and $error:E_NACC will be guaranteed success (success meaning, of course, a termination by traceback).", "+ There is, unfortunately, no way to raise the error E_NONE."}
@prop #19."$biglist" {} r
;;#19.("$biglist") = {"Generic BigList Utilities", "----------------------------", "$biglist is a collection of routines for maintaining huge persistent (sorted) lists in a format that is less likely to spam the server (which runs into a certain amount of trouble dealing with long ordinary lists --- btw we use `biglist' to refer to the huge data structure we're about to describe and `list' to refer to ordinary MOO lists {...}).  The biglist in question lives on a particular object, to which we will refer in the discussion below as the `home' object, and its various elements appear as leaves of a tree whose nodes are kept in properties of the home object.  It should be noted that the home object does not need to be (and in fact should *not* be) a descendant of $biglist one; $biglist merely provides utilities for manipulating the properties on the home object that are used in a particular biglist manipulation.  ", "", "All of the utilities below refer to `caller' to locate the home object.  Thus verbs to manipulate a given biglist must be located on or inherited by its home object itself.  The home object needs to define the following verbs", "", "  :_make(@args)     => new property on home object with value args", "  :_kill(prop)      delete a given property that was created by :_make", "  :_get(prop)       => home.prop", "  :_put(prop,@args) set home.prop = args", "  :_ord(element)    given something that is of the form of a biglist element", "                    return the corresponding ordinal (for sorting purposes).", "                    If you never intend to use :find_ord, then this can be a ", "                    routine that always returns 0 or some other random value.", "", "See $generic_biglist_home or $big_mail_recipient for examples.", "", "Those of the following routines that take a biglist argument are expecting", "either {} (empty biglist) or some biglist returned by one of the other routines", "", "  :length(biglist)          => length(biglist) (i.e., number of elements)", "  :find_nth(biglist,n)      => biglist[n]", "  :find_ord(biglist,k,comp) => n where n is", "     the largest such that home:(comp)(k,home:_ord(biglist[n])) is false, or", "     the smallest such that home:(comp)(k,home:_ord(biglist[n+1])) is true.", "     Always returns a value between 0 and length(biglist) inclusive.", "     This assumes biglist to be sorted in order of increasing :_ord values ", "     with respect to home:(comp)().", "     Standard situation is :_ord returns a number and comp is a < verb.", "", "  :start(biglist,s,e)  => {biglist[s..?],@handle} or {}", "  :next(@handle)       => {biglist[?+1..??],@newhandle} or {}", "     These two are used for iterating over a range of elements of a biglist", "     The canonical incantation for doing", "        for elt in (biglist[first..last])", "          ...", "        endfor", "     is", "        handle = :start(biglist,first,last);", "        while(handle)", "          for elt in (handle[1])", "            ...", "          endfor", "          handle = :next(@listdelete(handle,1));", "        endwhile", "", "The following all destructively modify their biglist argument(s) L (and M).", "", "  :set_nth(L,n,value)  =>  L[n] = value", "     replaces the indicated element", "", "  :insert_before(L,M,n) => {@L[1..n-1],@M,@L[n..length(L)]}", "  :insert_after (L,M,n) => {@L[1..n],  @M,@L[n+1..length(L)]}", "     takes two distinct biglists, inserts one into the other at the given point", "     returns the resulting consolidated biglist", "", "  :extract_range(L,m,n) => {{@L[1..m-1],@L[n+1..]}, L[m..n]} ", "     breaks the given biglist into two distinct biglists.", "", "  :delete_range(L,m,n[,leafkiller]) => {@L[1..m-1],@L[n+1..]}", "  :keep_range  (L,m,n[,leafkiller]) => L[m..n]", "     like extract_range only we destroy what we don't want.", "", "  :insertlast(L,value)  => {@L,value}", "     inserts a new element at the end of biglist.  ", "     If find_ord is to continue to work properly, it is assumed that the ", "     home:_ord(elt) is greater (comp-wise) than all of the :_ord values", "     of elements currently in the biglist.", "", "  :kill(L[,leafkiller]) ", "     destroys all nodes used by biglist.  ", "     Calls home:leafkiller on each element."}
@prop #19."$guest_log" {} rc
;;#19.("$guest_log") = {"$guest_log", "", "records guest connect/disconnect events.", "", ".max_events  -- maximum number of connect/disconnect events kept", ".connections -- actual list of events, the most recent ones first", "    each element is of the form", "      {object, is_connect, time, site}", "    object is the particular guest that (dis)connected", "    is_connect 1 or 0 according as this is a connect or not.", "", ":find(who,when)", "  => site name of WHO at the particular time", "     (or 0 if WHO was not logged in then)", "", ":last(n) ", "  prints a listing of the last n events"}
@prop #19."mail-resolution" {} rc
;;#19.("mail-resolution") = {"*forward*", "mail-resolve"}
@prop #19."$news" {} rc
;;#19.("$news") = {"*subst*", "$news", "-----", "This object is a mail_recipient like any other (see `help $mail_recipient').  One may send messages to it and use the usual recipient manipulation commands (@mail, @read, @rmm,...).  ", "", "Selected messages on this recipient are ordered in reverse date order (i.e., most recent first) and concatenated to produce the \"news\" that is printed in response to the player `news' command.  Each news item is thus a distinct message.  The default $player:confunc checks to see if any new messages have been selected for inclusion in the \"news\" since the player last read the news.", "", "The property $news.current_news holds the message sequence of messages currently considered as comprising \"the news\".  The following commands are used to change .current_news:", "", "  @addnews <message-seq> to %[$news]", "  @rmnews <message-seq> from %[$news]", "  @setnews %[$news] to <message-seq>", "", "@addnews includes the specified messages, @rmnews excludes the specified messages, and @setnews changes .current_news to be the given message sequence.  Note that these ONLY change whether a given message is marked as being \"in the news\" and do not actually add or remove messages from the mail recipient $news.", "", "The procedure for adding a news article is", "", "  Send a mail message to %[$mail_agent:name($news)]", "  @addnews last to %[$news]", "    This marks the message as belonging to the current newspaper.", "    This also announces to any player who have not yet read this message ", "    that there is a new version of the newspaper.", "", "The preferred method for updating a news items is to send a new version of the item, @rmnews the old version and @addnews the new one.", "", "The following ordinary mail commands behave differently", "  @rmm   removes any reference to message from .current_news ", "         in addition to removing the message itself from .messages", "  @unrmm completely undoes the effect of the previous @rmm; ", "         this includes restoring .current_news.", "", "By default, the newspaper is moderated, however there is the possibility of unmoderating it (see `help MR-access'), letting arbitrary players send mail to it; administrators could then @addnews those items deemed worthy."}
@prop #19."matching" {} rc
;;#19.("matching") = {"*forward*", "object-matching"}
@prop #19."MR-expiration" {} rc
;;#19.("MR-expiration") = {"The mail messages stored in mail recipients may be removed automatically by a weekly expiration task. New core owners who wish to turn this feature on and cut down on the db space used by mail recipients (Remember, players are mail recipients too) should start this task:", "", "    $wiz_utils:expire_mail_weekly", "", "When this task runs, it searches through all mail recipients and checks their .expire_period property. This property contains a time, in seconds, that messages should expire after. If this property is set to 0, then no expiration will take place from that recipient. The task, then, will compile a list of messages that are older than the expire period (e.g., if the property is set to 30 days, messages older than 30 days from the current date will expire). The default expiration period for mail recipients is 30 days.", "", "Normally, when the mail messages are expired from the recipient they are deleted. However, the owner of the recipient may elect to have the messages mailed to an email address prior to their erasure. There are two methods for doing this, one for players and one for children of $mail_recipient.", "", "Players:", "", "  Players may completely turn off mail expiration by setting the mail option `expire' off. If it is on, then $mail_agent.player_expire_time is the expire period used for mail on players. ", "  If a player has a registered email address, he may simply turn the mail option `no_auto_forward' off in order to have the expired messages sent to his email address before they are deleted. (The reversed logic saves on db space). See `help mail-options' and `help @registerme'.", "", "Mail Recipients:", "", "  The command to set the expiration period of a mail recipient is:", "", "    @set_expire <recipient> to <time>", "", "The <time> specified can be in english format (30 days, 60 days, etc.). If left off (the owner types `@set_expire <recipient> to'), the command will print out the current expiration information for that recipient. A list owner may set the expiration period up to a maximum of 180 days.", "", "  Similar to players, the owner of a mail recipient may have the mail sent to either his registered email address or to any other address he specifies before it expires. To prevent unsolicited email from going to a random address, confirmation must be made before the owner may set the address to something other than his registered address.", "", "  The command is:", "", "    @register <recipient> to <address>", "", "If the owner leaves off the <address>, the current registered address (if any) and expiration period will be returned. Again, if the address specified is the player's registered address, nothing more need be done. If it is not, then an email message will be sent to that address containing a password. Presumably, the owner can retrieve that password and then log back into the MOO and type:", "", "   @validate <recipient> with <password>", "", "which will enable the mail forwarding before expiration."}
@prop #19."mail-expiration" {} rc
;;#19.("mail-expiration") = {"*forward*", "MR-expiration"}
@prop #19."$big_mail_recipient" {} rc
;;#19.("$big_mail_recipient") = {"Generic Large Capacity Mail Recipient", "-------------------------------------", "Since any modifications to large lists entail copying the entire list over, operations on ordinary mail recipients having large numbers of messages, that actually change the content of .messages will take inordinately long.  Thus we have this version which makes use of the $biglist package, scattering the messages onto numerous properties so that write operations involving only a few messages will not require recopying of the entire list.", "", "In nearly all respects it behaves as the ordinary Mail Recipient, except that it is faster for certain kinds of operations.", "", "Certain unimplemented verbs, like :date_sort(), and :messages() currently return E_VERBNF.", "", "To convert an existing $mail_recipient-child (call it #MR) into a $big_mail_recipient-child the basic procedure is", "", "    ;;something.foo= #MR:messages();", "    @rmm 1-$ from #MR", "    @unrmm expunge", "    @chparent #MR to $big_mail_recipient", "    ;#MR:receive_batch(@something.foo);", "", "Reconstructing Damaged Big Mail Recipients", "------------------------------------------", "On rare occasions, the tree structure created by $biglist can be corrupted (this can happen on lists sufficiently large that a list-modification operation (e.g., @rmm, @renumber) runs out of ticks/seconds).  In the vast majority of such cases, your messages are all still there; it's simply that the tree we use for finding/searching them is messed up.", "", "To recover messages from a damaged big mail recipient (#DBMR)", " --- read to the end before you start typing any commands ---", "", "create a fresh $big_mail_recipient (#NEWBMR) and then do the following:", "", "   ;#NEWBMR:restore_from(#DBMR)", "", "When this finishes, #NEWBMR will contain all of the mail messages we were able to find.  (note that this will include messages that you had deleted from #DBMR but not expunged).  #NEWMBR should thenceforth be useable in place of #DBMR, however if #DBMR contains custom verbs and non-clear properties, these will also need to be copied over.", "", "Alternatively, one may do", "", "   @copyobject #DBMR to #TEMPBMR", "   ;#DBMR:restore_from(#TEMPBMR)", "", "to rebuild #DBMR in place.  This, however, will take about twice as long.", "", "oooooooooooooooooooooooooooooooo", "WARNING!!! WARNING!!! WARNING!!!", "oooooooooooooooooooooooooooooooo", "", "Calling #OBJ:restore_from(...) COMPLETELY AND IRREVOCABLY REMOVES ALL MESSAGES from the object that it is run on (#OBJ); you MUST be sure to EITHER have made a copy of #OBJ OR be doing the restore to a DIFFERENT object."}
@prop #19."$http_port" {} rc
;;#19.("$http_port") = {"  The $http_port listens on a MOO port for incoming HTTP transactions", "has a few properties and verbs that provide its listening", "functionality, and it also carries some properties used by the server", "that are described in detail in the LambdaMOO Programmer's Manual", "(server_options, connect_timeout, timeout_msg, recycle_msg, boot_msg,", "redirect_from_msg, redirect_to_msg, create_msg, connect_msg, and", "server_full_msg).", "", "The $http_port:do_login_command verb is the main workhorse of the", "object.  It parses the incoming transaction's first line to", "determine the method (GET/POST), the URI (specifies the requested", "resource), and the protocol version (generally 1.0).  Transactions", "are then passed to $http_handler:handle_http09 or", "$http_handler:handle_http10 depending on the HTTP version of the", "incoming transaction.", "", "User commands (wizardly use only) on the $http_port are:", "", "@set-port <port number> on <listener>", "   set the port to listen on", "@startlistening on <listener>", "   the object starts listening", "@stoplistening on <listener>", "   the object stops listening", "", "These have executable equivalents, useful if your MOO automatically", "starts listening with an $http_port upon startup.  These", "are: set_port, listen, and unlisten."}
@prop #19."$http_handler" {} rc
;;#19.("$http_handler") = {"The $http_handler:handle_http10 is the primary mechanism for", "processing web transactions, and is usually called by an $http_port.", "It accepts a URI in the following forms, with the results given:", "", "1) http://HOSTNAME:PORT", "2) http://HOSTNAME:PORT/?WEBPASS", "3) http://HOSTNAME:PORT/xxWEBPASS", "4) http://HOSTNAME:PORT/xxWEBPASS/CODE", "5) http://HOSTNAME:PORT/xxWEBPASS/CODE/OBJECT", "6) http://HOSTNAME:PORT/xxWEBPASS/CODE/OBJECT/REST", "7) http://HOSTNAME:PORT/xxWEBPASS/CODE/OBJECT/REST?SEARCH", "", "Where HOSTNAME is currently bioinfo.weizmann.ac.il,", "      PORT is 8888,", "      xx are two random characters,", "      WEBPASS is the user's web password and may be blank,", "      CODE is the web application's identity,", "      OBJECT is an object number (without the #),", "  and REST is anything else you append to the URL.", "", "When the MOO receives a web connection, it parses it as described", "above, and does the following:", "", "- a URL of type 1) will simply show the MOO's gateway page, unless", "   there is a form attached (which is then evaluated for", "   authentication information).", "- a URL of type 2) or 3) will check the webpass.", "  - if it's omitted then either web cookie or web \"domain\"", "    authentication is used.", "  - if it's bad, it will show the MOO's identification screen.", "  - if it's OK, it will show the list of web applications.", "- a URL of types 4), 5), 6) or 7) will check the CODE.", "  - if there isn't a code of a valid web app, it will show the list", "    of apps.", "  - if it's a valid code, it will call the application's  :method_get", "    or :method_post giving it as parameters: (who, what, rest,", "    search), which are: the user whose webpass is being used,", "    the object number that was parsed, the REST, and the SEARCH", "    if any.", "_____________________________", "", "Web transactions typically follow the pathway:", "", "$http_port", "   |", "   V", "/$http_handler:handle_http10", "\\$http_handler:handle_http09", "   |", "   | <-> parse_line", "   |", "   | <-> /web_authenticate", "   |     \\cookie_authenticate", "   |", "   | <-> init_taskprop", "   V", ":process <-> /$webapp:method_get <-> /object:html", "   |         \\$webapp:method_post   | object:do_post", "   |                                 \\object:get_vrml", "   |", "   |  The `process' verb determines which $webapp to call and", "   |  processes the result into its final form.", "   |", "make_headerlist", "   |", "   V", "tell_quick_and_die", "_____________________________", "", "These properties are defined on $http_handler", "", "task_details            ", "task_index              ", "    These store information about the open web transactions", "    that can be retrieved with $http_handler;retrieve_taskprop.", "    Also, any verb called during the transaction can submit new", "    task properties that can then be retrieved by any other", "    verb when called.  Some default properties can only be", "    retreived by wizardly verbs.", "total_webcalls          ", "    Total number of web transactions handled by this object", "    since its installation.", "webpass_handler         ", "    The object number of the webpass handler object.  The", "    webpass handler is not corified.", "gateway_html            ", "    The default web page displayed when someone connects to", "    $network.site on a port with an $http_port object", "    listening.  This should have a form allowing authentication", "    (see the default value for an example).", "wizwebpass_disallowed   ", "    Almost obsoleted mechanism for regulating which", "    authentication system wizards may use to open a web window", "    for their wiz character.", "version                 ", "    The currently installed version of the BioGate system.", "output_timeout          ", "    If a transaction takes longer than this number of seconds,", "    it is assumed to have failed (probably due to a traceback),", "    and the connection is broken.", "password_failed_text    ", "    Text returned if a web tran
>> Network buffer overflow: 19 lines of output to you have been lost <<
@prop #19."integrated-web-telnet" {} rc
;;#19.("integrated-web-telnet") = {"The integrated web/telnet system uses frames to divide the user's web", "browser window into sections, and has the browser load different", "functional units of the system into different frames.  At a minimum,", "frames are used for displaying an HTML document (in the web frame)", "and a Java-based Telnet applet (in the live interaction frame, aka", "telnet frame).", "", "This text describes the system that builds and manages the integrated", "interface display.  See the BioGate System installation instructions", "for instructions on setup.", "", "The trajectory of the web transaction that creates the user display", "is as follows:", "", "<http_port>:do_login_command -> $http_handler:handle_http10", " :handle_http10 checks if the transaction is an authentication", "request (empty URI with a form submitted), and if it is then looks,", "using a call to $http_handler:preprocess_URL, to see if there is an", "\"integrated_web_interface\" form entry (the value is ignored.  This", "may be present because the name of the SUBMIT button for the", "integrated interface on the web Gateway page is", "\"integrated_web_interface\" so if the user selects that button then a", "form entry with that name will be included.  If they select the", "button for an independent web window (usually named", "\"independent_web_window\") then that would be the form entry included", "instead).", "", "  If the integrated web interface has been selected, the", "authentication is set to $no_one (anonymous), the URI is set to", "\"/frame_mgr/0/frameset\" and the transaction continues based on the", "new value.", "", " -> $http_handler:process -> $frame_manager:method_post", "   -> $frame_manager:make_frameset", "The :make_frameset verb builds the HTML page including the <FRAMESET>", "tags, defining the frames layout.  It checks the submitted form for", "an entry named \"client\" and uses the value (a number) to determine", "the object number of the $jclient_handler to use.  It also identifies", "an \"interaction_frame_height\" that is the percentage of the browser", "window taken up by the interaction frame, and any @weboption settings", "to be initialized after the user connects.", "", "   The :make_frameset verb then calls the", "<jclient_handler>:preload_page to retrieve the URL for the HTML doc", "displayed in the web frame until the telnet client connects and sends", "its first \"display url\" command.    The :preload_page verb checks the", "<jclient_handler>.default_preload_page property.  If it's a STR then", "it is assumed to be a URL for the preload page, else if it is a LIST", "it is assumed to be the text of", "", "  The :make_frameset verb specifies a URL for the interaction frame", "that includes the form data as a \"method GET\"-encoded form (appended", "to the URL after a \"?\").  This URL will cause the browser to retrieve", "a web page generated by $frame_manager:get_jclient_html the HTML page", "itself, in a separate transaction initiated automatically by the web", "browser when it seeks to fill the frames..", "  The :get_jclient_html verb calls <jclient_handler>:make_applet_html", "to retrieve the HTML text to be loaded into the \"interaction frame\"", "that contains the Java Telnet applet itself.  This text typically", "contains the <APPLET> section that loads the applet.  The", ":make_applet_html verb extracts various applet settings from the", "submitted form, which are specific to the applet it handles. If the", "applet is capable of issuing a command upon connection tot he MOO,", "the :make_applet_html verb can use the user_name and password fields", "to  issue a \"preapproved <username> <password>\" line that will", "automatically connect to the correct user.  The password is a", "temporary password valid for only a few minutes after its generation,", "and issued specifically to allow the applet to automatically connect", "without giving away the user's true connect password.", "", "  To summarize, the presence of field named \"integrated_web_system\"", "in the submitted Gateway form leads to a <FRAMESET> page being", "issued.  The web frame contents are determined by", "<jclient_handler>:preload_page and the interaction frame's contents", "are determined by <jclient_handler>make_applet_html.  Once the telnet", "applet connects, it is expected to issue an MCP \"display-url\"", "directive that replaces the top frame's contents with a view of the", "room the newly connected character is in."}
@prop #19."web-system" {} r #96
;;#19.("web-system") = {"*subst*", "  The MOO has installed the Biogate System, a set of MOO objects and", "associated code that allow a MOO to function and a web server, and to", "dynamically create HTML and VRML descriptions of MOO rooms and other", "objects.", " The version installed is: %[$http_handler.version]", "", "The general flow during a web transaction is:", "", "    port-handler -> $http_handler <-> web-application", "", "The $http_handler sends out the retrieved information and then breaks", "the connection.", "", "In addition, the web-application commonly will call individual", "objects.  For instance, the $standard_webviewer calls <object>:html()", "and the $std_vrml10viewer calls <object:get_vrml() to retrieve", "appropriate information about the object's current state.  Objects", "usually supply fragments of the final text that is compiled by the", "web-application and sent back to the $http_handler.", "", "The following components of the web system have their own core help", "texts:", "", "$http_port     -- listens on a MOO port for HTTP transactions", "$http_handler  -- determines what type of resource is being requested", "                  (eg. HTML or VRML), retrieves the relevent data", "                  (possibly using a $webapp), sends out the info and", "                  closes the connection", "$webapp        -- The \"web applications\" that generate the text", "                  returned for a web transaction.", "$frame_manager -- Performs various functions related to building", "                  frames on the user's web page and placing the proper", "                  information in each.", "$jclient_handler -- Carries the verbs and data used to allow telnet", "                  clients written in Java to connect to the MOO,", "                  and interact appropriately.  Each telnet client", "                  uses a different child of the $jclient_handler.", "$std_vrml10viewer -- This webapp displays a static VRML/1.0 view of a", "                  given room.  Although it will pass VRML/2.0", "                  information, it doesn't have any facilities for", "                  live VRML display control.  It does dynamically", "                  create the room view, though, so", "                  the returned VRML file describes the room at the", "                  moment of the request.", "$html_editor   -- A child of the generic editor that specifically", "                  writes to object's associated URL/HTML data", "                  (#1.url).", "$web_options   -- Options package for setting various", "                  user-customizable aspects of the web system.", "$web_utils     -- A collection of utility verbs used by the web", "                  system and web system programmers", "Webpass Handler   The object that stores temporary web passwords for", "                  users interacting with the MOO's web system (no", "                  further help text is available for this object).", "                  Referenced as $http_handler.webpass_handler", "$teleporter    -- The General Teleporter object is used by the web", "                  system to move characters when they teleport.  It", "                  is a general purpose tool for this, though, and", "                  can be used by non-BioGate systems.", "$anon_webviewer -- A Web Viewer that allows anonymous web", "                  transactions to be used to browse the MOO.  This", "                  web viewer presents the MOO's rooms much like the", "                  $standard_webviewer, but doesn't require the", "                  transactions be authenticated.  It does not allow", "                  users to manipulate objects, only to examine them", "                  in ways that don't change any of their", "                  characteristics.", "$standard_webviewer -- The default web viewer for browsing the MOO", "                  with authenticated transactions.  It dynamically", "                  creates web pages displaying the rooms and other", "                  objects found in the MOO.", "integrated-web-telnet -- Describes the innards of the integrated", "                  web/telnet system, using the Cup-O MUD Java", "                  telnet client as an example.", "", "Additional topics:", "", "web             -- introduction to the MOO's web system", "@web-options    -- user options for cutomizing web system actions", "web-programming -- how to program objects to be \"web aware\"", "web-security    -- how the web system's authentication system works"}
@prop #19."web-security" {} rc
;;#19.("web-security") = {"There are three alternative mechanisms for authentication that the", "web system can use.  The method used depends on the setting of the", "\"authentication_method\" property on the $http_port that is handling", "the transaction  Transactions through $login are assumed to be cookie", "authenticated unless $http_handler.login_is_http09 is true, in which", "case they are webpass authenticated.  Note that for HTTP/0.9", "transactions, only webpass authentication is available, and that", "$login can't perform web-authentication.  Alternative settings are:", "webpass, cookies, and web-authentication.  The \"cookies\" setting is", "strongly recommended.  Information on web cookie authentication may", "be found at \"http://home.netscape.com/newsref/std/cookie_spec.html\"", "and on web authentication in the IETF draft for HTTTP/1.0", "specification 3 (draft-ietf-http-v10-spec-03.html).", "", "1. URL-embedded \"webpass\" system", "", "In this system, a password is embedded into the URL for the", "transaction.  A webpass of \"anon\" or \"anonymous\" always gives the", "transaction the permissions of $noone.  The webpass is a temporary", "value associated with the user for the duration of the session.  It", "is erased from the $http_handler.webpass_handler database when the", "user disconnects from their character.  Since the temporary webpass", "appears within the URL, visible to whoever is looking over the user's", "shoulder, it is not as secure as the web cookie system.", "", "2. web cookie system", "", "In this system, a temporary webpass is generated but appears as a web", "cookie within the header lines of the transaction, and not in the", "URL.  If an $http_port is set to use web cookies and the user's", "browser doesn't recognize them, then the system automatically uses", "URL-embeded webpasses instead.  Detection of the browser's web cookie", "function is performed by sending a cookie (named \"cookies_ok\") with", "the gateway page, and then checking for it on the subsequent", "authentication form submission.  If the browser can't handle web", "cookies, then the system automatically switched to URL-embedding of", "the webpass.  The web cookie system is considered the most secure and", "recommended for general use.", "  Note that users can \"clear\" their authentication in two ways under", "the web cookie system.  One is to chose the \"List of Application\"", "where there is a button that performs this task.  The other is to", "return the the MOO's gateway page.  A \"clear\" cookie is always sent", "to the user's browser when that page is sent by the MOO, insuring", "that the user can reauthenticate without any lingering cookies to", "complicate the process.", "", "3. \"web authentication\" system", "", "This uses the authentication method given in the HTTP/1.0", "specification.  As stated there, it is not intended for highly secure", "activity since the password is essentially sent in the clear, even", "though it is hidden from the casual user by its incorporation into", "the HTTP header lines.  In this system, the user is presented by the", "browser with a request for their character's name and password.  This", "information is thereafter included in every transaction to the MOO", "until the browser is reinitialized, generally by quitting and", "restarting.  For this reason, this \"web authentication\" method is not", "recommended, although it is a capability of the BioGate System."}
@prop #19."$mail_browser" {} rc
;;#19.("$mail_browser") = {"  The $mail_browser is a web system tool for reading MOO mail", "folders.It has two customizable properties on it:", "", "   The \"headerlist_len\" property is the length of the headers list", " displayed when someone browses a folder.", "", "   The \"guest_subscribed_folders\" is the list of mail folders (as a", " LIST of OBJ numbers) that guest and anonymous web users are shown as", " their \"subscribed\" folders.  They can access the others (that are", " public) through the \"list all folders\" link, but this is basically", "the short list of ones you recommend."}
;;#19.("index_cache") = {"core-index"}
;;#19.("aliases") = {"Core Utility Help"}
;;#19.("description") = "Help database for LambdaCore utility objects and generics."
;;#19.("object_size") = {94604, 855068591}

@verb #19:"find_topics" this none this
@program #19:find_topics
if (!args)
  l = {};
  for p in (properties(#0))
    if ((p[max(1, $ - 5)..$] == "_utils") && `#0.(p):help_msg() ! ANY')
      l = {@l, "$" + p};
    endif
  endfor
  return {@pass(@args), @l};
elseif (ts = pass(@args))
  return ts;
elseif ((what = args[1])[1] != "$")
  return {};
elseif (ts = pass("$generic_" + what[2..$]))
  return ts;
elseif ((r = rindex(w = strsub(what[2..$], "-", "_"), "_utils")) && ((r == (length(w) - 5)) && (`valid(#0.(w)) ! ANY' && `#0.(w):help_msg() ! ANY')))
  return {what};
else
  return {};
endif
.

@verb #19:"get_topic" this none this
@program #19:get_topic
topic = args[1];
if ((topic == (("$" + topic[2..$ - 5]) + "utils")) && (valid(#0.(w = strsub(topic[2..$], "-", "_"))) && (uhelp = #0.(w):description())))
  return {tostr("General information on $", w, ":"), "----", @(typeof(uhelp) == STR) ? {uhelp} | uhelp};
else
  return pass(@args);
endif
.

@verb #19:"dump_topic" this none this rxd #2
@program #19:dump_topic
if ((E_PROPNF != (text = pass(@args))) || ((args[1][1] != "$") || ((!((uprop = args[1][2..$]) in properties(#0))) || (typeof(uobj = #0.(uprop)) != OBJ))))
  return text;
else
  udesc = uobj.description;
  return {tostr(";;$", uprop, ".description = $command_utils:read_lines()"), @$command_utils:dump_lines((typeof(udesc) == LIST) ? udesc | {udesc})};
endif
.

"***finished***
