"Compiled generic player (#6) at Fri Jul 18 21:29:12 1997 IDT";
"  The changes for $player are by far the most complicated in the";
"installation, and require some programming knowledge.  Take your";
"time, and read these instructions carefully!";
"";
"  Note that the @join command, which nearly ubiquitous in MOOs, is";
"not in older version of the standard LambdaCore.  The BioWeb system";
"depends on the command having an executable component ($player:_join)";
"which moves the user's character when called with an argument that is";
"the object number of the object to join (ie. move to the same";
"location as that object).";
"  On many MOOs, the $player:@join command is monolithic, in which";
"case you'll need to split it into command and executable halves, as";
"in the example given in this file.  If you're starting with a bare";
"LambdaCore, you can just add the "_join" verb given here, and";
"optionally add the "@join" verb also if you wish your users to have";
"this functionality.";
"  If you are using one of the newer versions of the LambdaCore, with";
"Frand's Player Class being used as the base character object instead";
"of the old #6, then you already have a @join command, but it's not on";
"$player.  The above instructions then apply to the @join command on";
"Frand's Player Class.";
"";
"  Additional changes to $player that need to be made:";
"";
"1. Add "set_web_option" as an alias for $player:set_mail_option";
"  (performed automatically by the installation script)";
"";
"2. Add the aliases @webop*tions and @web-op*tions to $player:@mailop";
"  (performed automatically by the installation script)";
"";
"3. Modify $player:@mailop to include the 'web option' possibility.";
"Note that the line immediately after";
"'set_task_perms(player)' will need to read something like:";
"what = {"mail", "edit", "display", "web"}[index("medw", verb[2])];";
"";
"4. Make $player:home executable (with:@chmod $player:home +x) and add";
"the following lines to the start of the verb:";
"  if ((caller!=this) && !$perm_utils:controls(caller_perms(),this))";
"    return E_PERM;";
"  endif";

@prop $player."web_options" {"applinkdown", "exitdetails", "map"} rc BioGate_wizard
"The following property should already be defined on the object, with perms 'rc' and owner BioGate_wizard";
@set $player.vrml_desc to {"WWWInline {name \"http://www.crl.com/~riche/body.wrl\"}", "#WWWInline {name \"http://www.cco.caltech.edu/~mercer/vrml/person.wrl\"}"}
@prop $player."mcp_session_info" {0, "", "1.0", "", {}} c BioGate_wizard
 
"Adding alias set_web_option to $player:set_mail_option ...";
@addalias set_web_option to $player:set_mail_option
"Done";
"Adding aliases @webop*tions and @web-op*tions to $player:@mailop ...";
@addalias @webop*tions,@web-op*tions to $player:@mailop
"Done.";

@verb $player:"@url @icon @html @vrml" none for any r BioGate_wizard
@program $player:@url
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
set_task_perms(player);
what = player:my_match_object(iobjstr, player.location);
if ($command_utils:object_match_failed(what, iobjstr))
  return;
endif
type = strsub(verb, "@", "");
if (type == "vrml")
  url = player.location == what && $object_utils:isa(what, $room) ? what.vrml_interior_desc | what.vrml_desc;
else
  url = what:("get_" + type)(player);
endif
if (!url)
  player:tell(what:namec(1) + " has no attached ", type == "URL" && "URL." || (type == "HTML" && "HTML document.") || (type == "vrml" && "VRML description") || "icon URL.");
elseif (typeof(url) == STR)
  player:tell(tostr(type != "icon" ? "URL" | "Icon URL", " for ", what:name(1), ": \"", url, "\""));
else
  if (type == "html")
    player:tell(tostr(what:namec(1), " has an associated HTML document of ", l = length(url), " line", l > 1 ? "s" | "", "."));
  else
    player:tell(tostr(what:namec(1), " has an associated VRML description of ", l = length(url), " line", l > 1 ? "s" | "", "."));
  endif
  if (l > 15)
    player:tell("Do you want to see it now?");
    if ($command_utils:yes_or_no())
      player:tell_lines({"------", @url, "------"});
    endif
  else
    player:tell_lines({"------", @url, "------"});
  endif
endif
"Last modified Sun Apr  7 19:59:59 1996 IDT by EricM (#3264).";
.
 
@verb $player:"@url @icon @html X99TEMPALIAS" any is any r BioGate_wizard
@program $player:X99TEMPALIAS
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
set_task_perms(player);
what = player:my_match_object(dobjstr, player.location);
if ($command_utils:object_match_failed(what, dobjstr))
  return;
elseif (!$perm_utils:controls(player, what))
  return player:tell("Sorry, you don't have permission to add that to that object.");
endif
type = strsub(verb, "@", "") == "icon" ? "icon" | "url";
if (type == "url" && typeof(old = what:get_url()) == LIST)
  player:tell("That object has an associated HTML document of ", length(old), " lines.");
  if (!$command_utils:yes_or_no("Are you sure you want to replace it?"))
    return player:tell("No changes made.");
  endif
endif
if (!iobjstr)
  if (length(argstr) > (i = index(argstr, " is ") + 3) && "\"\"" == $string_utils:trim(argstr[i..length(argstr)]))
    "clear it";
  elseif (verb == "@html")
    player:tell("Enter the lines of the HTML document to attach to ", dobj:name(1), ":");
    if (text = $command_utils:read_lines())
      dobj:set_url(text);
      player:tell("New HTML document set (", length(text), " lines).");
    else
      player:tell("No changes made.");
    endif
    return;
  else
    player:tell("To clear the ", type, " or set it to a blank value, use: @", type, " ", dobjstr, " is \"\"");
    return player:tell("To see the current value use: @", type, " for ", dobjstr);
  endif
endif
if (!(match = match(argstr, tostr($string_utils:regexp_quote(dobjstr), " +is +%(.*%)"))))
  return player:tell("Sorry, but the ", verb, " command appears to be broken. Please tell an administrator that the command's match() system is failing.");
endif
iobjstr = substitute("%1", match);
value = $string_utils:to_value(iobjstr);
if (value[1])
  result = what:("set_" + type)(value[2]);
  if (result)
    result = (type == "url" ? "URL" | "Icon URL") + " set to: " + $string_utils:print(result);
  elseif (result == 0 || result == "")
    result = tostr(type == "url" ? "URL" | "Icon URL", " ", value[2] ? "set" | "removed", " successfully.");
  else
    result = tostr(result);
  endif
else
  result = value[2];
endif
player:tell(tostr(result));
"Last modified Thu Aug 15 10:10:06 1996 IDT by EricM (#3264).";
.
@rmalias X99TEMPALIAS from $player:X99TEMPALIAS
 
@verb $player:"@htmledit" any none none rd BioGate_wizard
@program $player:@htmledit
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
set_task_perms(player);
if ($command_utils:object_match_failed(dobj, dobjstr))
  return;
elseif (!$perm_utils:controls(player, dobj))
  return player:tell("Sorry, you can only edit the URL or HTML document on objects you own.");
endif
$html_editor:invoke(dobjstr, verb);
"Last modified Thu Aug 15 10:13:14 1996 IDT by EricM (#3264).";
.
 
@verb $player:"@weblink" any to any rd BioGate_wizard
@program $player:@weblink
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
text = "";
if ($command_utils:object_match_failed(dobj, dobjstr))
  return;
elseif (!$perm_utils:controls(perms = caller_perms() == #-1 ? player | caller_perms(), dobj))
  return player:tell("Sorry, but you can only use this command with objects you own.");
endif
set_task_perms(perms);
if (typeof(old_URL = dobj:get_url()) != STR)
  player:tell("The presently set URL for ", dobj:name(1), " is not a simple URL!");
  player:tell("Do you want to clear it and set some text or an image to be the hyperlink?");
  if ($command_utils:yes_or_no())
    dobj:set_url("");
    old_URL = "";
    player:tell("...cleared...");
    player:tell();
  else
    player:tell("<finished, no changes made>");
    return;
  endif
endif
if (!old_URL)
  player:tell("There is no text or image set for ", dobj:name(1), ".");
  text = "";
  while (!text)
    player:tell("Please enter the text you wish to use as a hyperlink to the file at '", iobjstr, "'.");
    if (!(text = $command_utils:read()))
      player:tell("You must provide some text as the hyperlink to continue with this command, or enter \"@abort\" to quit.");
      player:tell();
    endif
  endwhile
  text = "<P><B>" + text + "</B><P>";
elseif (!$command_utils:yes_or_no("There is already a URL attached to the object, presumably for an image associated with the object. Do you want to use that image as a hyperlink (else it'll be cleared)?"))
  dobj:set_url("");
  old_URL = "";
  player:tell("Cleared...");
endif
if (!iobjstr)
  while (!iobjstr)
    player:tell("Please enter the URL of the file you wish to establish a link to:");
    iobjstr = $command_utils:read();
    if (!iobjstr)
      player:tell("You must specify a URL that the link is to lead towards to continue with this command.");
      player:tell();
    endif
  endwhile
endif
if (old_URL)
  player:tell(dobj:namec(1), "'s associated image at '", old_URL, "' is now a link to the file at \"", iobjstr, "\".");
  dobj:set_url({tostr("<A HREF=\"", iobjstr, "\" onClick=\"alert('A new window is being opened for your selection.  Your window into ", $network.MOO_name, " will remain.')\" TARGET=\"accessory_frame\"><IMG SRC=\"", old_URL, "\"></A>")});
else
  player:tell("The text '", text, "' is now a hyperlink to the file at '", iobjstr, "'.");
  dobj:set_url({tostr("<A HREF=\"", iobjstr, "\" onClick=\"alert('A new window is being opened for your selection.  Your window into ", $network.MOO_name, " will remain.')\" TARGET=\"accessory_frame\">", text, "</A>")});
endif
"Last modified Tue Aug 27 16:19:20 1996 IDT by EricM (#3264).";
.
 
" This is the 'executable' part of the @join system.  It was split off";
"from @join (the 'command' part)  so that the web system could use it";
"instead of just duplicating the code.";
 
@verb $player:"_join" this none this rx BioGate_wizard
@program $player:_join
"_join ([who OBJ]) -> none";
"Accepts `who' as person to join if given as args[1], else uses the value of `dobj' instead.";
if (caller != this && caller_perms() != this && !$perm_utils:controls(caller_perms(), this))
  return E_PERM;
endif
destination = args ? args[1] | dobj.location;
if ($object_utils:isa(destination, $generic_editor))
  player:tell("Sorry, ", dobjstr, " is editing right now.");
  player:tell("You can't join ", dobj.gender.po, " in the editor.");
  return;
elseif (player.location == destination)
  player:tell("You're already there!");
  return;
elseif (!$object_utils:isa(destination, $room))
  player:tell("Sorry, you can't go there.");
  return;
endif
origin = player.location;
if ($object_utils:isa(origin, $generic_editor))
  player:tell("You should finish or abort your editing session first.");
  return;
endif
player:moveto(destination);
if (player.location == destination)
  player:tell("You join ", dobj:name(1), ".");
  if (valid(origin))
    origin:announce_all(player:namec(1), " disappears suddenly for parts unknown.");
  endif
  destination:announce(player:namec(1), " materializes out of thin air.");
else
  return player:tell(destination.nogo_msg || tostr("Either you don't really want to go there, or ", destination:name(1), " doesn't want to accept you."));
endif
"Last modified Wed Oct 30 16:53:00 1996 IST by EricM (#3264).";
.
 
"This is the 'command' part of the @join system.  The 'executable'";
"part was split off as '_join' so that the web system could use it";
"instead of just duplicating the code.";
 
@verb $player:"@join" any none none rd BioGate_wizard
@program $player:@join
set_task_perms(caller == this ? this | $no_one);
dobj = $string_utils:match_player(dobjstr);
if (dobj == $failed_match)
  player:tell("There is no person named ", dobjstr, ".");
elseif (dobj == $nothing)
  player:tell("You must @join a person.");
elseif (dobj == $ambiguous_match)
  player:tell("I'm not sure which ", dobjstr, " you mean.");
else
  this:_join();
endif
"Last modified Thu Apr 20 08:22:30 1995 IDT by EricM (#3264).";
.
 
@verb $player:"@webpass*word" any any any r BioGate_wizard
@program $player:@webpassword
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
wh = $http_handler.webpass_handler;
if (prepstr == "for")
  "well, should match an object here...";
  player:tell("Sorry, not implemented yet.");
elseif (!dobjstr)
  new = wh:set_password(player);
  player:tell("Your new web password is: ", new);
elseif ($perm_utils:password_ok(player.password, dobjstr))
  player:tell("Please choose a webpass different from the password you use to connect via telnet.");
elseif (index(dobjstr, " "))
  player:tell("Please provide a new web password without spaces.");
elseif (!match(dobjstr, "^%w+$"))
  player:tell("Please include only alphanumeric characters in your webpass (letters or numbers).");
elseif (wh.(dobjstr) == player)
  player:tell("That was already your web password...");
else
  new = wh:set_password(player, dobjstr);
  if (typeof(new) != STR)
    return player:tell("Your web password couldn't be modified for some reason. Please report to an administrator.");
  elseif (dobjstr != new)
    player:tell("The password you provided wasn't good for some reason.");
  endif
  player:tell("Your web password is now: ", new);
endif
"Last modified Thu Aug 22 19:58:41 1996 IDT by EricM (#3264).";
.
 
@verb $player:"web_viewer_buttons" this none this rx BioGate_wizard
@program $player:web_viewer_buttons
"web_viewer_buttons(who, what OBJ, rest STR, search STR [line STR]) -> HTML frg LIST";
"Returns a bar of buttons bearing links that perform some commonly used commands";
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
set_task_perms(caller_perms());
code = args[1];
what = args[2];
link0 = "<A HREF=\"&LOCAL_LINK;/" + code;
link1 = link0 + "/";
link1a = tostr(link1, "$teleporter/");
link2 = "\">";
link3 = "</A>";
eol = "<P>";
where = player.location;
text = {};
"";
"LOOK AROUND button";
text = {@text, tostr(" [", link0, "#focus", link2, "<B>Look around</B>", link3, "]")};
"FOCUS";
text = {@text, " [<A HREF=\"#focus\">Focus</A>]"};
"SHOW/HIDE MAP button";
if ($teleporter.image_map)
  "Assume that if a default teleporter image map is set, the MOO is supporting this feature.";
  hasmap = "map" in this.web_options;
  text = {@text, tostr(" [", link1, tonum(where), "/+map", hasmap ? "-" | "+", link2, hasmap ? "Hide map" | "Show map", link3, "]")};
endif
"GO HOME button";
text = {@text, where != this.home ? tostr(" [", link1a, "home#focus", link2, "Go home", link3, "]") | ""};
"CENTRAL ROOM JUMP button";
if (player.location != $teleporter.central_room)
  text = {@text, tostr(" [", link1a, "central_room#focus", link2, $teleporter.central_room.name, link3, "]")};
endif
"WHO button";
text = {@text, tostr(" [", "<A HREF=\"&LOCAL_LINK;/info/0/who\">Who's in ", $network.MOO_name, "?", link3, "]")};
"SHOW/HIDE INVENTORY button";
hasinv = "inv" in this.web_options;
text = {@text, tostr(this.contents ? tostr(" [", link1, tonum(where), "/+inv", hasinv ? "-" | "+", link2, hasinv ? "Hide inventory" | "Show inventory", link3, "]") | "")};
"CUSTOMIZE: PAGE, CHARACTER, OBJECT button";
text = {@text, tostr(" [", "Customize-<A HREF=\"&LOCAL_LINK;/vcst\">page", link3, "/<A HREF=\"&LOCAL_LINK;/char\">yourself", link3, "/<A HREF=\"&LOCAL_LINK;/", $object_browser:get_code(), link2, "objects", link3, "]")};
"MAIL button";
text = {@text, tostr(" [", "<A HREF=\"&LOCAL_LINK;/", $mail_browser:get_code(), link2, "Read mail", link3, "]")};
"WIZARD'S CHOICE";
if (`valid($web_utils.wizards_choice) ! E_PROPNF' && (wc_code = $web_utils.wizards_choice:get_code()))
  text = {@text, tostr("  [", "<A HREF=\"&LOCAL_LINK;/", wc_code, link2, "Wizard's Choice!", link3, "]")};
endif
"VRML LINK";
if ($http_handler:retrieve_taskprop("http_version")[1] != "0")
  "try to present link to room an object is located in";
  "but only if it's at least an HTTP/1.0 connection";
  if (!$object_utils:isa(room = what, $room))
    while (valid(room) && !$object_utils:isa(room = room.location, $room))
    endwhile
    room = valid(room) ? room | what;
  endif
  frame = "separateVRML" in player.web_options ? " TARGET=\"vrml_frame\"" | "";
  text = {@text, tostr(" [<A HREF=\"&LOCAL_LINK;/", $std_vrml10viewer:get_code(), "/", tonum(room), "/room.wrl\"", frame, "><IMG border=0 SRC=\"http://www.du.org/images/icons/vr_goggles.gif\" ALT=\"\"><B>VRML view</B></A>]")};
endif
"HELP button";
text = {@text, tostr(" [", link1, tonum($help), "#focus", link2, "Help", link3, "]")};
"";
text = {"<CENTER><BR CLEAR=\"RIGHT\"><HR>", @text};
text[length(text)] = text[length(text)] + "<HR>";
text = {@text, "</CENTER>"};
return text;
"Last modified Tue Jul  1 19:44:15 1997 IDT by EricM (#3264).";
.
 
@verb $player:"more_info_for_web" this none this rxd BioGate_wizard
@program $player:more_info_for_web
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
if (caller != this && !$perm_utils:controls(caller_perms(), this))
  return E_PERM;
endif
text = {};
if (!(this in connected_players()))
  text = {@text, "<BR>", tostr($gender_utils:pronoun_sub("%{:He} %{!is} sleeping.", this))};
elseif ((idle = idle_seconds(this)) < 60)
  text = {@text, "<BR>", tostr($gender_utils:pronoun_sub("%{:He} %{!is} awake and %{!looks} alert.", this))};
else
  time = $string_utils:from_seconds(idle);
  text = {@text, tostr("<BR>", $gender_utils:pronoun_sub("%{:He} %{!is} awake, but %{!has} been staring off into space for ", this), time, ".")};
endif
return {@text, tostr("<P>Go to ", this:name(), "'s ", $network.MOO_name, " <A HREF=\"&LOCAL_LINK;/", $web_geninfo:get_code(), "/", tonum(this), "/info\">", "home page</A><BR>")};
"Last modified Sun Jun 29 23:50:15 1997 IDT by EricM (#3264).";
.
 
@verb $player:"slide" any any any rxd BioGate_wizard
@program $player:slide
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
directions = {"n", "e", "s", "w", "ne", "se", "sw", "nw", "u", "d", "north", "east", "south", "west", "northeast", "southeast", "southwest", "northwest", "up", "down"};
if (!(this.location in {player, player.location}))
  return player:tell("You can't find that here.");
endif
words = args;
"--figure direction";
dir = "";
while (args && !(dir = args[1] in directions))
  args = listdelete(args, 1);
endwhile
if (!dir)
  return player:tell("Move in what direction? Some possibilities are north, south, east, west, up or down.");
endif
"--what to slide";
dobjstr = (i = index(argstr, directions[dir]) - 1) ? argstr[1..i - 1] | "";
"--how far to slide it";
distance = length(words) > (d = directions[dir] in words) ? words[d + 1] | "1";
if (!$string_utils:is_numeric(distance))
  if (index(distance, "."))
    player:tell("Sorry, only integer values can be used, but you can try using a smaller unit of measurement (ie. inches or centimeters).");
  else
    player:tell("Please specify a numeric, integer ", distance, " to move (not \"distance\").");
  endif
  return;
endif
amount = $vrml_utils:distance_in_mm(tonum(distance), units = length(words) > d + 1 ? words[d + 2] | "meters");
"--and in what direction";
if (typeof(amount) == ERR)
  return player:tell("I don't recognize \"", units, "\" as a measure of units.");
endif
dir = dir > 10 ? dir - 10 | dir;
if (!dobjstr)
  dobj = player;
elseif ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
  return;
elseif (!(dobj.location in {player, player.location} || $object_utils:isa(dobj, $exit)))
  return player:tell("I don't see that here.");
elseif (dobj != player && $object_utils:isa(dobj, $player))
  return player:tell("Hey, how would you like it if someone pushed YOU around? Better reconsider that.");
endif
if (dobj.key && !$perm_utils:controls(player, dobj))
  "locked down objects can be moved only by their owners";
  return player:tell("It seems to be stuck tightly where it is.");
elseif ((result = $vrml_utils.test_collisions) && $vrml_utils:causes_collision(dobj, dir, amount))
  amount = result[1];
  bumped = ", until it bumps into " + result[2]:name(1);
else
  bumped = "";
endif
"--finally, just move it";
if (result = $vrml_utils:translate(dobj, amount, directions[dir]))
  player:tell(result);
else
  units = units[l = length(units)] == "s" ? units[1..l - 1] | units;
  player:tell("You move ", player == dobj ? "" | dobj:name(1) + " ", distance, " ", units, " ", directions[dir + 10], ".");
  player.location:announce(player.name, " moves ", player == dobj ? "" | dobj:name(1) + " ", distance, " ", units, " ", directions[dir + 10], ".");
endif
"Last modified Thu Jan 23 16:25:53 1997 IST by Gustavo (#2).";
.
 
@verb $player:"@scale*-vrml @scale*vrml" any with any rd BioGate_wizard
@program $player:@scale
"Set the X, Y, and Z axis VRML scaling for an object";
"If only one number is given, assume the user means evem scaling and apply it to all 3 axes.";
"Omitting the scaling values returns the current setting.";
"Note that scale setting is RELATIVE to old scale setting, and not set to the absolute value specified by the user";
"Setting the scaling to \"0\" has the special meaning of \"resent it to 1:1:1\"";
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
if ($command_utils:object_match_failed(dobj = player:my_match_object(dobjstr), dobjstr))
  return;
elseif (!$perm_utils:controls(player, dobj))
  return player:tell("Sorry, only it's owner can do that.");
elseif (!iobjstr)
  return player:tell("VRML scaling values (X, Y, Z-axis) for ", dobj.name, " currently set to: ", $string_utils:print($vrml_utils:div_by_thousand(dobj:get_vrml_scale())));
endif
set_task_perms(player);
if (iobjstr in {"0", " "})
  if ($command_utils:yes_or_no("Reset scaling values to 1:1:1?"))
    dobj:set_vrml_scale({1000, 1000, 1000});
    player:tell("VRML scaling values (X, Y, Z-axis) for ", dobj.name, " now set to: ", $string_utils:print($vrml_utils:div_by_thousand(dobj:get_vrml_scale())));
  else
    player:tell("VRML scaling values (X, Y, Z-axis) for ", dobj.name, " left unchanged at: ", $string_utils:print($vrml_utils:div_by_thousand(dobj:get_vrml_scale())));
  endif
  return;
endif
"parse out scaling spec";
if (index(iobjstr, ","))
  axes = $string_utils:explode(iobjstr, ",");
elseif (index(iobjstr, " "))
  axes = $string_utils:explode(iobjstr, " ");
else
  axes = {iobjstr};
endif
syntax_msg = {"Usage: @scaling-vrml <object> with <scaling specifier>", "Examples of valid scaling specifiers are:", "  10,5,3    120%    50%,30%,10%    3x, 5x", "Only whole number specifier numbers may be used and if neither \"x\" (fold ratio) or \"%\" (percentage) is given, \"fold ratio\" is assumed."};
if (length(axes) == 1)
  "equally proportional scaling";
  parsed = $vrml_utils:parse_scale_spec(axes[1]);
  if (typeof(parsed[1]) == ERR)
    player:tell(parsed[2]);
    return player:tell_lines(syntax_msg);
  endif
  axes = {parsed[2], parsed[2], parsed[2]};
else
  "non-specified axes are unchanged";
  axes = {@axes, "1", "1"}[1..3];
  parsed = $vrml_utils:parse_scale_spec(axes);
  if (typeof(parsed[1]) == ERR)
    player:tell(parsed[2]);
    return player:tell_lines(syntax_msg);
  endif
  axes = parsed[2];
endif
old_scale = dobj:get_vrml_scale();
for axis in [1..3]
  axes[axis] = old_scale[axis] * axes[axis] / 1000;
endfor
if ((result = dobj:set_vrml_scale(axes)) == axes)
  player:tell("New VRML scaling values (X, Y, Z-axis) for ", dobj.name, " set to: ", $string_utils:print($vrml_utils:div_by_thousand(axes)));
else
  player:tell("For some reason, the new VRML scaling values for ", dobj.name, " couldn't be set (", $string_utils:print(result), ").");
endif
"Last modified Fri Apr  5 23:09:03 1996 IDT by EricM (#3264).";
.
 
@verb $player:"get_vrml_desc" this none this rxd BioGate_owner
@program $player:get_vrml_desc
"get_vrml_desc(none) -> vrml text LIST";
"if the person's shape is default (the dummy), then hang a";
"face in from with the person's icon if they have an icon";
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
desc = pass(@args);
if (is_clear_property(this, "vrml_desc") && (icon = this:get_icon()))
  "if they have an icon, build them a face and plaster the icon onto it";
  face = {"Texture2Transform {center .5 .5 rotation 3.1416}"};
  "person hasn't customized their VRML body from the default";
  face = {@face, tostr("Texture2 {filename \"", icon, "\" wrapS CLAMP wrapT CLAMP}")};
  face = {@face, "Transform {rotation 1 0 0 -1.5709 "};
  face = {@face, "translation 0 .5 -.12  scaleFactor 1 1 1.2}"};
  face = {@face, "Cylinder { radius .13 height .005}"};
  desc = {@desc, @face};
endif
return desc;
"Last modified Mon Aug 26 17:41:21 1996 IDT by EricM (#3264).";
.
 
"  **********   *************   **************";
"IMPORTANT!!!  Don't just paste the following verb into your MOO.  The";
"only part that is needed is the part set inside the "----" markers,";
"and the `old_loc=this.location' line before the `pass(@args' line.";
"The function of this code is to automatically update the user's web";
"window when they change rooms, if they are using the integrated";
"web/telnet interface.  The `old_loc=this.location' can go anywhere";
"before the `pass(@args)' and the divided off section can go anywhere";
"after the `pass(@args)' line.";
 
@verb $player:"moveto" this none this rxd BioGate_wizard
@program $player:moveto
if (args[1] == #-1)
  return E_INVARG;
  this:notify("You are now in #-1, The Void.  Type `home' to get back.");
endif
set_task_perms(caller_perms());
old_loc = this.location;
pass(@args);
"  ----  ";
"update web window if one is open and html_frame hasn't been updated yet";
if (old_loc != this.location && typeof($web_options:get(this.web_options, "telnet_applet")) == OBJ && !$frame_manager:webframe_is_updated(""))
  $frame_manager:update_webframe(this, tostr($web_utils:user_webviewer():get_code(), "#focus"), "");
endif
"  ----  ";
"Last modified Tue Oct  8 23:09:46 1996 IST by EricM (#3264).";
.
 
"IMPORTANT!!!! Don't just paste in the following verb.  Many MOO's";
"don't have it, in which case you should first";
"";
"@verb $player:do_out_of_band_command this none this rxd #2";
"";
"And then paste in the verb code below.  HOWEVER, if your MOO does";
"have this verb, you will want to insert similar code such that";
"$mcp:do_out_of_band_command is always called when an out of band";
"command occurs.  In the BioGate System code, this is done by calling";
"that verb from #0:do_out_of_band_command or";
"$player:do_out_of_band_command.  See the header text for";
"#0:do_out_of_band_command for more details.";
 
@verb $player:"do_out_of_band_command" this none this rxd BioGate_wizard
@program $player:do_out_of_band_command
":do_out_of_band_command(@args) -> ?";
"called by #0:do_out_of_band_command to handle OOB traffic for this user.";
if (!(caller in {#0, this}))
  return E_PERM;
endif
return $mcp:do_out_of_band_command(@args);
"Last modified Wed Oct  9 00:03:09 1996 IST by EricM (#3264).";
.
 
@verb $player:"@set-web @set-vrml @setweb @setvrml" any on any rd BioGate_wizard
@program $player:@set-web
"Usage: @set-web @set-vrml <setting name> on <object>";
"Set some or vrml setting, specified by name, on the object";
"Note that while any setting name might be accepted, not all are recognized by the web system as significant";
"(C) Copyright 1996 BioGate Partners; All rights reserved.";
class = index(verb, "web") ? "web" | "vrml";
if ($command_utils:object_match_failed(iobj, iobjstr))
  return;
elseif (!$perm_utils:controls(this, iobj))
  return player:tell("Sorry, but only its owner can do that.");
elseif (!dobjstr)
  if (!iobj.(class + "_settings")[1])
    player:tell("No ", class, " settings set on ", iobj:name(1), ".");
  else
    player:tell("Web settings for ", iobj:name(1), ":");
    for setting in [1..length(iobj.(class + "_settings")[1])]
      if (typeof(iobj.(class + "_settings")[2][setting]) == LIST)
        player:tell("  ", iobj.(class + "_settings")[1][setting], " (", length(iobj.(class + "_settings")[2][setting]), " lines):");
        for line in (iobj.(class + "_settings")[2][setting])
          player:tell($string_utils:from_value(line, 0, -1));
        endfor
      else
        player:tell("  ", iobj.(class + "_settings")[1][setting], ": ", $string_utils:from_value(iobj.(class + "_settings")[2][setting], 0, -1));
      endif
    endfor
    player:tell("----");
  endif
  return;
endif
player:tell("Enter the value for the new \"", dobjstr, "\" setting on ", iobj:name(1), ":");
if (!(value = $command_utils:read()) && $command_utils:yes_or_no("Clear the value?"))
  if (typeof(iobj:("clear_" + class + "_setting")(dobjstr)) == ERR)
    player:tell("Sorry, there doesn't seem to be a ", class, " setting of that name to be cleared.");
  else
    player:tell("Setting cleared.");
  endif
else
  "set non-list, non-numeric values to STR";
  if (typeof(result = iobj:("set_" + class + "_setting")(dobjstr, value)) != ERR)
    player:tell("Set to: ", $string_utils:from_value(result, 0, -1));
  else
    player:tell("Could not set that, for some reason.");
  endif
endif
"Last modified Sun Mar 10 11:29:10 1996 IST by EricM (#3264).";
.
